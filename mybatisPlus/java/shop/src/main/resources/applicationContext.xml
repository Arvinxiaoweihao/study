<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
          http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/tx
          http://www.springframework.org/schema/tx/spring-tx.xsd
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/aop
          http://www.springframework.org/schema/aop/spring-aop.xsd">


	<!-- 指定数据源配置文件 -->
	<context:property-placeholder location="classpath:db-config.properties" />

	<!-- 组件搜索 -->
	<context:component-scan base-package="com.thunisoft.shop" />

	<!-- 注解aop配置 -->
	<aop:aspectj-autoproxy />

	<!-- 数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${db.driverClassName}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 配置mybatis配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="typeAliasesPackage" value="com.thunisoft.shop.domain"/>
		<!-- 自动扫描mapping.xml文件，**表示迭代查找,代表所有目录下,也可在sqlMapConfig.xml中单独指定xml文件 -->
 		<property name="mapperLocations" value="classpath:com/thunisoft/shop/mapper/*.xml" /> 
	</bean>

	<!-- 扫描mybatis映射接口类-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	<!-- 映射接口类包路径 -->
        <property name="basePackage" value="com.thunisoft.shop.dao"/>
    </bean>

	<!-- mybatis spring sqlSessionTemplate,使用时直接让spring注入即可 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<!-- 定义事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 下面使用aop切面的方式来实现 -->
	<tx:advice id="txadvice" transaction-manager="transactionManager">
		<!--配置事务传播性，隔离级别以及超时回滚等问题 -->
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="get*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="find*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!--配置事务切点 -->
		<!-- 其中第一个*代表返回值，第二*代表service下子包，第三个*代表方法名，“（..）”代表方法参数 -->
		<aop:pointcut id="services"
			expression="execution(* com.thunisoft.shop.service.*.*(..))" />
		<aop:advisor pointcut-ref="services" advice-ref="txadvice" />
	</aop:config>

	<!-- 引用各模块的spring配置文件，aop：xml版 -->
	<import resource="classpath*:spring/spring-*.xml" />

</beans>  